//
//  LoginWorker.swift
//  Assignment
//
//  Created by Digvijay Joshi on 26/10/19.
//  Copyright (c) 2019 Digvijay Joshi. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

class LoginWorker
{
	
	fileprivate struct Constants {
		static let kErrorDictionaryKey = "error"
		static let kUserAccountDictionaryKey = "userAccount"
	}
	
	func loginUser(completion: @escaping (Login.LoginUser.Response?, Error?) -> ())
	{
		let headers = [
			"Content-Type": "application/x-www-form-urlencoded"
		]
		
		let postData = NSMutableData(data: "user=test_user&password=a".data(using: String.Encoding.utf8)!)
		let request = NSMutableURLRequest(url: NSURL(string: "https://bank-app-test.herokuapp.com/api/login")! as URL,
																			cachePolicy: .useProtocolCachePolicy,
																			timeoutInterval: 10.0)
		request.httpMethod = "POST"
		request.allHTTPHeaderFields = headers
		request.httpBody = postData as Data
		
		let session = URLSession.shared
		let dataTask = session.dataTask(with: request as URLRequest, completionHandler: { (data, response, error) -> Void in
			if (error != nil) {
				completion(nil, error)
			} else {
				let errorDictionary: NSDictionary?
				let userAccountDictionary: [String: AnyObject]
				
				if let json = data?.jsonDictionary() {
					
					errorDictionary = json[Constants.kErrorDictionaryKey] as? NSDictionary
					userAccountDictionary = (json["userAccount"] as! [String : AnyObject])
					
					if errorDictionary!.count > 0{
						completion(nil, error)
						return
					} else if ((userAccountDictionary as AnyObject).count > 0) {
						let userAccount = Login.LoginUser.Response(bankAccount: String(describing: userAccountDictionary["bankAccount"]!),
																											 agency: String(describing: userAccountDictionary["agency"]!),
																											 userId: String(describing: userAccountDictionary["userId"]!),
																											 name: String(describing: userAccountDictionary["name"]!),
																											 balance: String(describing: userAccountDictionary["balance"]!))
						completion(userAccount, nil)
						return
					}
				}
			}
		})
		
		dataTask.resume()
	}
	
}
