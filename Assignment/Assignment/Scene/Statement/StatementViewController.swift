//
//  StatementViewController.swift
//  Assignment
//
//  Created by Digvijay Joshi on 23/10/19.
//  Copyright (c) 2019 Digvijay Joshi. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit
import JGProgressHUD

protocol StatementDisplayLogic: class
{
	func displayUserAccountDetail(viewModel: Statement.GetUserAccount.ViewModel)
  func displayFetchedStatement(viewModel: Statement.FetchStatement.ViewModel)
}

class StatementViewController: UIViewController, StatementDisplayLogic
{
	@IBOutlet weak var titleLabel: UILabel!
	@IBOutlet weak var contaLabel: UILabel!
	@IBOutlet weak var valueLabel: UILabel!
	
	@IBOutlet weak var statementTableView: UITableView!
	
	
  var interactor: StatementBusinessLogic?
  var router: (NSObjectProtocol & StatementRoutingLogic & StatementDataPassing)?

  // MARK: Object lifecycle
  
  override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?)
  {
    super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
    setup()
  }
  
  required init?(coder aDecoder: NSCoder)
  {
    super.init(coder: aDecoder)
    setup()
  }
  
  // MARK: Setup
  
  private func setup()
  {
    let viewController = self
    let interactor = StatementInteractor()
    let presenter = StatementPresenter()
    let router = StatementRouter()
    viewController.interactor = interactor
    viewController.router = router
    interactor.presenter = presenter
    presenter.viewController = viewController
    router.viewController = viewController
    router.dataStore = interactor
  }
  
  // MARK: Routing
  
  override func prepare(for segue: UIStoryboardSegue, sender: Any?)
  {
    if let scene = segue.identifier {
      let selector = NSSelectorFromString("routeTo\(scene)WithSegue:")
      if let router = router, router.responds(to: selector) {
        router.perform(selector, with: segue)
      }
    }
  }
  
  // MARK: View lifecycle
  
  override func viewDidLoad()
  {
    super.viewDidLoad()
		fetchStatement()
  }
	
	override func viewWillAppear(_ animated: Bool) {
		super.viewWillAppear(animated)
		getUserAccountDetail()
	}
	
	override var preferredStatusBarStyle: UIStatusBarStyle {
		return UIStatusBarStyle.lightContent
	}
	
	var statementList: [Statement.FetchStatement.ViewModel.Transaction] = []
	
  // MARK: Fetch Statement
  
  func fetchStatement()
  {
    let request = Statement.FetchStatement.Request()
    interactor?.fetchStatement(request: request)
  }
	
	func getUserAccountDetail()
	{
		let request = Statement.GetUserAccount.Request()
		interactor?.getUserAccount(request: request)
	}
	
	func displayUserAccountDetail(viewModel: Statement.GetUserAccount.ViewModel)
	{
		let displayedUserModel = viewModel.displayedUser
		self.titleLabel.text = displayedUserModel.name
		self.contaLabel.text = displayedUserModel.bankAccount
		self.valueLabel.text = displayedUserModel.balance
	}
	
  func displayFetchedStatement(viewModel: Statement.FetchStatement.ViewModel)
  {
		statementList = viewModel.displayedTransactions
		DispatchQueue.main.async {
			self.statementTableView.reloadData()
		}
  }
	
	// MARK: IBActions
	
	@IBAction func handleLogout(_ sender: Any) {
		self.dismiss(animated: true, completion: nil)
	}
	
	
}

// MARK: UITableViewDelegate, UITableViewDataSource

extension StatementViewController: UITableViewDelegate, UITableViewDataSource
{
	
	func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
		return statementList.count
	}
	
	func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
		let cell:StatementTableViewCell = statementTableView.dequeueReusableCell(withIdentifier: "StatementTableViewCell") as! StatementTableViewCell
		cell.configureCellWith(transaction: statementList[indexPath.row])
		return cell
	}
	
	func tableView(_ tableView: UITableView, heightForRowAt indexPath: IndexPath) -> CGFloat {
		return 102.0
	}
	
	func tableView(_ tableView: UITableView, didSelectRowAt indexPath: IndexPath) {
		
	}
	
}
